diff --git a/drivers/acpi/scan.c b/drivers/acpi/scan.c
index fd001c433..6226b1404 100644
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@ -1543,6 +1543,9 @@ static bool acpi_device_enumeration_by_parent(struct acpi_device *device)
 	if (acpi_is_indirect_io_slave(device))
 		return true;
 
+	if (!strcmp(acpi_device_hid(device), "OBDA8723"))
+		return false;
+
 	/* Macs use device properties in lieu of _CRS resources */
 	if (x86_apple_machine &&
 	    (fwnode_property_present(&device->fwnode, "spiSclkPeriod") ||
diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 090af85a0..a8dc80a84 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -362,6 +362,13 @@ config HID_KYE
 	- MousePen i608X tablet
 	- EasyPen M610X tablet
 
+config HID_KINGJIM
+	tristate "Kingjim"
+	depends on HID
+	---help---
+	Support for Kingjim notebook built-in keyboard and touchpad via i2c
+		-Kingjim XMC10
+
 config HID_UCLOGIC
 	tristate "UC-Logic"
 	depends on USB_HID
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 235bd2a7b..71ad4093b 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -55,6 +55,7 @@ obj-$(CONFIG_HID_ITE)		+= hid-ite.o
 obj-$(CONFIG_HID_KENSINGTON)	+= hid-kensington.o
 obj-$(CONFIG_HID_KEYTOUCH)	+= hid-keytouch.o
 obj-$(CONFIG_HID_KYE)		+= hid-kye.o
+obj-$(CONFIG_HID_KINGJIM)	+= hid-kingjim.o
 obj-$(CONFIG_HID_LCPOWER)	+= hid-lcpower.o
 obj-$(CONFIG_HID_LENOVO)	+= hid-lenovo.o
 obj-$(CONFIG_HID_LOGITECH)	+= hid-logitech.o
diff --git a/drivers/hid/hid-core.c b/drivers/hid/hid-core.c
index bf190f635..b0f91f6e7 100644
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@ -2100,6 +2100,9 @@ static const struct hid_device_id hid_have_special_driver[] = {
 	{ HID_USB_DEVICE(USB_VENDOR_ID_KYE, USB_DEVICE_ID_KYE_EASYPEN_M610X) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_KYE, USB_DEVICE_ID_KYE_PENSKETCH_M912) },
 #endif
+#if IS_ENABLED(CONFIG_HID_KINGJIM)
+	{ HID_I2C_DEVICE(USB_VENDOR_ID_KINGJIM, USB_DEVICE_ID_KINGJIM_XMC10_KEYBOARD) },
+#endif
 #if IS_ENABLED(CONFIG_HID_LCPOWER)
 	{ HID_USB_DEVICE(USB_VENDOR_ID_LCPOWER, USB_DEVICE_ID_LCPOWER_LC1000 ) },
 #endif
diff --git a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
index 92de8444b..074c1d59f 100644
--- a/drivers/hid/hid-ids.h
+++ b/drivers/hid/hid-ids.h
@@ -631,6 +631,9 @@
 #define USB_DEVICE_ID_KYE_EASYPEN_M610X	0x5013
 #define USB_DEVICE_ID_KYE_PENSKETCH_M912	0x5015
 
+#define USB_VENDOR_ID_KINGJIM		0x8566
+#define USB_DEVICE_ID_KINGJIM_XMC10_KEYBOARD	0x0101
+
 #define USB_VENDOR_ID_LABTEC		0x1020
 #define USB_DEVICE_ID_LABTEC_WIRELESS_KEYBOARD	0x0006
 
diff --git a/drivers/hid/hid-kingjim.c b/drivers/hid/hid-kingjim.c
new file mode 100644
index 000000000..a898fd6b2
--- /dev/null
+++ b/drivers/hid/hid-kingjim.c
@@ -0,0 +1,52 @@
+/*
+ *  HID driver for various devices which are apparently based on the same chipset
+ *  from certain vendor which produces chips that contain wrong LogicalMaximum
+ *  value in their HID report descriptor. Currently supported devices are:
+ *
+ *    kingjim XMC10
+ *
+ *  Copyright (c) 2018 Takao Akaki <mongonta@gmail.com>
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#include <linux/device.h>
+#include <linux/hid.h>
+#include <linux/module.h>
+
+#include "hid-ids.h"
+
+struct kingjim_drvdata {
+	unsigned long quirks;
+	struct input_dev *input;
+};
+
+static __u8 *kingjim_report_fixup(struct hid_device *hdev, __u8 *rdesc,
+		unsigned int *rsize)
+{
+	if (*rsize >= 56 && rdesc[54] == 0x25 && (rdesc[55] == 0x65 || rdesc[55] == 0x6a)) {
+		hid_info(hdev, "Fixing up logical maximum in report descriptor (kingjim)\n");
+		rdesc[55] = 0xdd;
+	}
+	return rdesc;
+}
+
+static const struct hid_device_id kingjim_devices[] = {
+	{ HID_I2C_DEVICE(USB_VENDOR_ID_KINGJIM, USB_DEVICE_ID_KINGJIM_XMC10_KEYBOARD) },
+	{ }
+};
+MODULE_DEVICE_TABLE(hid, kingjim_devices);
+
+static struct hid_driver kingjim_driver = {
+	.name = "kingjim",
+	.id_table = kingjim_devices,
+	.report_fixup = kingjim_report_fixup
+};
+module_hid_driver(kingjim_driver);
+
+MODULE_LICENSE("GPL");
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index af194640d..416d18bbd 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -2945,6 +2945,10 @@ static int mmc_pm_notify(struct notifier_block *notify_block,
 	case PM_HIBERNATION_PREPARE:
 	case PM_SUSPEND_PREPARE:
 	case PM_RESTORE_PREPARE:
+		if (host->slot.cd_irq >= 0) {
+			free_irq(host->slot.cd_irq, host);
+			host->slot.cd_irq = -EINVAL;
+		}
 		spin_lock_irqsave(&host->lock, flags);
 		host->rescan_disable = 1;
 		spin_unlock_irqrestore(&host->lock, flags);
@@ -2979,6 +2983,9 @@ static int mmc_pm_notify(struct notifier_block *notify_block,
 	case PM_POST_SUSPEND:
 	case PM_POST_HIBERNATION:
 	case PM_POST_RESTORE:
+		if (host->slot.cd_irq < 0) {
+			mmc_gpiod_request_cd_irq(host);
+		}
 
 		spin_lock_irqsave(&host->lock, flags);
 		host->rescan_disable = 0;
diff --git a/net/rfkill/rfkill-gpio.c b/net/rfkill/rfkill-gpio.c
index 00192a996..7145d6386 100644
--- a/net/rfkill/rfkill-gpio.c
+++ b/net/rfkill/rfkill-gpio.c
@@ -163,6 +163,7 @@ static int rfkill_gpio_remove(struct platform_device *pdev)
 
 #ifdef CONFIG_ACPI
 static const struct acpi_device_id rfkill_acpi_match[] = {
+	{ "OBDA8723", RFKILL_TYPE_BLUETOOTH },
 	{ "BCM4752", RFKILL_TYPE_GPS },
 	{ "LNV4752", RFKILL_TYPE_GPS },
 	{ },
diff --git a/sound/soc/codecs/rt5670.c b/sound/soc/codecs/rt5670.c
index c5094b439..f0dd376e2 100644
--- a/sound/soc/codecs/rt5670.c
+++ b/sound/soc/codecs/rt5670.c
@@ -2864,6 +2864,17 @@ static const struct dmi_system_id dmi_platform_intel_quirks[] = {
 						 RT5670_DEV_GPIO |
 						 RT5670_JD_MODE1),
 	},
+	{
+		.callback = rt5670_quirk_cb,
+		.ident = "Kingjim XMC10",
+		.matches = {
+			DMI_MATCH(DMI_BOARD_NAME, "Cherry Trail FFD"),
+		},
+		.driver_data = (unsigned long *)(RT5670_DMIC_EN |
+						 RT5670_DMIC1_IN2P |
+						 RT5670_DEV_GPIO |
+						 RT5670_JD_MODE1),
+	},
 	{
 		.callback = rt5670_quirk_cb,
 		.ident = "Dell Wyse 3040",
